name: build
on: [push, pull_request]
jobs:
  test:
    strategy:
      matrix:
        go-version: [1.11.x, 1.12.x, 1.13.x, 1.14.x]
        platform: [ubuntu-latest, macos-latest]
    runs-on: ${{ matrix.platform }}
    env:
      GO111MODULE: "on"
    steps:
      - name: Install Go
        uses: actions/setup-go@v1
        with:
          go-version: ${{ matrix.go-version }}

      - name: Checkout code
        uses: actions/checkout@v1

      - name: Download Go modules
        run: go mod download

      - name: Build
        run: go build -v ./...

      - name: Test
        run: go test -v -tags ci ./...

      - name: Storage S3 Backend Tests
        env:
          KNOXITE_AMAZONS3_URL: ${{ secrets.KNOXITE_AMAZONS3_URL }}
        run: |
          ./admin/setup_s3_test_environment.sh
          go test -v -count=1 -tags "ci backend" -covermode atomic -coverprofile=s3.cov ./storage/s3
        if: matrix.go-version == '1.14.x' && matrix.platform == 'ubuntu-latest' && github.event_name == 'push'

      - name: Storage SFTP Backend Tests
        env:
          KNOXITE_SFTP_URL: ${{ secrets.KNOXITE_SFTP_URL }}
        run: |
          ./admin/setup_sftp_test_environment.sh
          go test -v -count=1 -tags "ci backend" -covermode atomic -coverprofile=sftp.cov ./storage/sftp
        if: matrix.go-version == '1.14.x' && matrix.platform == 'ubuntu-latest' && github.event_name == 'push'

      - name: Storage FTP Backend Tests
        env:
          KNOXITE_FTP_URL: ${{ secrets.KNOXITE_FTP_URL }}
        run: |
          ./admin/setup_ftp_test_environment.sh
          go test -v -count=1 -tags "ci backend" -covermode atomic -coverprofile=ftp.cov ./storage/ftp
        if: matrix.go-version == '1.14.x' && matrix.platform == 'ubuntu-latest' && github.event_name == 'push'

      - name: Storage WebDav Backend Tests
        env:
          KNOXITE_WEBDAV_URL: ${{ secrets.KNOXITE_WEBDAV_URL }}
        run: |
          ./admin/setup_webdav_test_environment.sh
          go test -v -count=1 -tags "ci backend" -covermode atomic -coverprofile=webdav.cov ./storage/webdav
        if: matrix.go-version == '1.14.x' && matrix.platform == 'ubuntu-latest' && github.event_name == 'push'

      - name: Storage Dropbox Backend Tests
        env:
          KNOXITE_DROPBOX_URL: ${{ secrets.KNOXITE_DROPBOX_URL }}
        run: go test -v -count=1 -tags "ci backend" -covermode atomic -coverprofile=dropbox.cov ./storage/dropbox
        if: matrix.go-version == '1.14.x' && matrix.platform == 'ubuntu-latest' && github.event_name == 'push'

      - name: Storage Azure File Backend Tests
        env:
          KNOXITE_AZURE_FILE_URL: ${{ secrets.KNOXITE_AZURE_FILE_URL }}
        run: go test -v -count=1 -tags "ci backend" -covermode atomic -coverprofile=azure.cov ./storage/azure
        if: matrix.go-version == '1.14.x' && matrix.platform == 'ubuntu-latest' && github.event_name == 'push'
      
      - name: Storage Mega Backend Tests
        env:
          KNOXITE_MEGA_URL: ${{ secrets.KNOXITE_MEGA_URL }}
        run: go test -v -count=1 -tags "ci backend" -covermode atomic -coverprofile=mega.cov ./storage/mega
        if: matrix.go-version == '1.14.x' && matrix.platform == 'ubuntu-latest' && github.event_name == 'push'

      - name: Storage Backblaze B2 Backend Tests
        env:
          KNOXITE_BACKBLAZE_URL: ${{ secrets.KNOXITE_BACKBLAZE_URL }}
        run: go test -v -count=1 -tags "ci backend" -covermode atomic -coverprofile=backblaze.cov ./storage/backblaze
        if: matrix.go-version == '1.14.x' && matrix.platform == 'ubuntu-latest' && github.event_name == 'push'

      - name: Coverage
        env:
          COVERALLS_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          GO111MODULE=off go get github.com/mattn/goveralls
          GO111MODULE=off go get github.com/wadey/gocovmerge
          go test -race -covermode atomic -coverprofile=profile.cov ./...

          $(go env GOPATH)/bin/gocovmerge *.cov > combined.cov
          $(go env GOPATH)/bin/goveralls -coverprofile=combined.cov -service=github
        if: matrix.go-version == '1.14.x' && matrix.platform == 'ubuntu-latest'
